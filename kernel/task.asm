;=================================================================================
; Copyright (C) Andrzej Adamczyk (at https://blackdev.org/). All rights reserved.
;=================================================================================

; get pointer from APIC exception handling function
extern	kernel_task_switch

; 64 bit code
[BITS 64]

; information for linker
section	.text

; share routine
global	kernel_task

; align routine to full address (I am Speed - Lightning McQueen)
align	0x08,	db	0x00
kernel_task:

; debug disassembler
; xchg bx, bx
; int3
; add al, r8b
; add byte [eax + ebx*2 + 0x12], r8b
; add byte [rax + rbx*2 - 0x12], r8b
; add byte [eax + ebx*2 + 0x12345678], r8b
; add byte [rax + rbx*2 - 0x12345678], r8b
; add	byte [kernel_task], r8b
; add ax, r8w
; add eax, r8d
; add rax, r8
; add word [eax + ebx*2 + 0x12], r8w
; add word [rax + rbx*2 - 0x12], r8w
; add dword [eax + ebx*2 + 0x12], r8d
; add dword [rax + rbx*2 - 0x12], r8d
; add qword [eax + ebx*2 + 0x12345678], r8
; add qword [rax + rbx*2 - 0x12345678], r8
; add	word [kernel_task], r8w
; add	dword [kernel_task], r8d
; add	qword [kernel_task], r8
; add r8b, byte [eax + ebx*2 + 0x12]
; add r8b, byte [rax + rbx*2 - 0x12]
; add r8w, word [eax + ebx*2 + 0x12]
; add r8w, word [rax + rbx*2 - 0x12]
; add r8d, dword [eax + ebx*2 + 0x12]
; add r8d, dword [rax + rbx*2 - 0x12]
; add r8, qword [eax + ebx*2 + 0x12345678]
; add r8, qword [rax + rbx*2 - 0x12345678]
; add	r8w, word [kernel_task]
; add	r8d, dword [kernel_task]
; add	r8, qword [kernel_task]
; add al, 0x12
; add ax, 0x1234
; add eax, 0x12345678
; add rax, 0x12345678

; push rax
; push rbx
; push rcx
; push rdx
; push rsi
; push rdi
; push rsp
; push rbp
; push r8
; push r9
; push r10
; push r11
; push r12
; push r13
; push r14
; push r15
; pop rax
; pop rbx
; pop rcx
; pop rdx
; pop rsi
; pop rdi
; pop rsp
; pop rbp
; pop r8
; pop r9
; pop r10
; pop r11
; pop r12
; pop r13
; pop r14
; pop r15

; movsxd rax, r8d
; movsxd rax, dword [r8d + r9d*2 + 0x12]
; movsxd rax, dword [r8 + r9*2 - 0x12]
; movsxd rax, dword [kernel_task]

; push 0x12
; push 0x1234
; push 0x12345678

; imul eax, ebx, 0x12
; imul eax, ebx, 0x12345678
; imul rax, rbx, 0x12
; imul rax, rbx, 0x12345678
; imul eax, dword [ebx + ecx*2 + 0x12], 0x12
; imul eax, dword [ebx + ecx*2 + 0x12], 0x12345678
; imul eax, dword [rbx + rcx*2 + 0x12], 0x12
; imul eax, dword [rbx + rcx*2 + 0x12], 0x12345678
; imul rax, qword [ebx + ecx*2 + 0x12], 0x12
; imul rax, qword [ebx + ecx*2 + 0x12], 0x12345678
; imul rax, qword [rbx + rcx*2 + 0x12], 0x12
; imul rax, qword [rbx + rcx*2 + 0x12], 0x12345678

; insb
; insw
; insd
; outsb
; outsw
; outsd

; db 0x70, 0xF6
; db 0x71, 0xF4
; db 0x72, 0xF2
; db 0x73, 0xF0
; db 0x74, 0xEE
; db 0x75, 0xEC
; db 0x76, 0xEA
; db 0x77, 0xE8
; db 0x78, 0xE6
; db 0x79, 0xE4
; db 0x7A, 0xE2
; db 0x7B, 0xE0
; db 0x7C, 0xDE
; db 0x7D, 0xDC
; db 0x7E, 0xDA
; db 0x7F, 0xD8

; ; add al, 0x12
; db 0x80, 0xC0, 0x12
; add byte [eax + ebx*2 + 0x10], 0x12
; add byte [rax + rbx*2 + 0x10], 0x12
; ; add ax, 0x1234
; db 0x66, 0x81, 0xC0, 0x34, 0x12
; ; add eax, 0x12345678
; db 0x81, 0xC0, 0x78, 0x56, 0x34, 0x12
; ; add rax, 0x12345678
; db 0x48, 0x81, 0xC0, 0x78, 0x56, 0x34, 0x12
; add word [eax + ebx*2 + 0x10], 0x1234
; add word [rax + rbx*2 + 0x10], 0x1234

; ; add word [rip + 0x10], 0x1234
; db 0x66, 0x81, 0x05, 0x10, 0x00, 0x00, 0x00, 0x34, 0x12
; ; add dword [rip + 0x10], 0x12345678
; db 0x81, 0x05, 0x10, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12
; ; add word [0x00000008], 0x1234
; db 0x66, 0x67, 0x81, 0x05, 0x10, 0x00, 0x00, 0x00, 0x34, 0x12
; ; add dword [0x00000008], 0x12345678
; db 0x67, 0x81, 0x05, 0x10, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12
; ; add dword [rip - 0x05], 0x12345678
; db 0x81, 0x05, 0xFB, 0xFF, 0xFF, 0xFF, 0x78, 0x56, 0x34, 0x12
; ; add qword [rip + 0x10], 0x12345678
; db 0x48, 0x81, 0x05, 0x10, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12
; ; add qword [rip - 0x05], 0x12345678
; db 0x48, 0x81, 0x05, 0xFB, 0xFF, 0xFF, 0xFF, 0x78, 0x56, 0x34, 0x12
; ; add qword [0x00000010], 0x12345678
; db 0x67, 0x48, 0x81, 0x05, 0x10, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12
; ; add qword [0x80000010], 0x12345678
; db 0x67, 0x48, 0x81, 0x05, 0x10, 0x00, 0x00, 0x80, 0x78, 0x56, 0x34, 0x12

; ; add ax, 0x12
; db 0x66, 0x83, 0xC0, 0x12
; ; add eax, 0x12
; db 0x83, 0xC0, 0x12
; add rax, 0x12
; ; add word [eax + 0x12345678], 0xFF
; db 0x66, 0x67, 0x83, 0x80, 0x78, 0x56, 0x34, 0x12, 0xFF
; ; add word [rax + 0x12345678], 0xFF
; db 0x66, 0x83, 0x80, 0x78, 0x56, 0x34, 0x12, 0xFF
; ; add dword [eax + 0x12345678], 0xFF
; db 0x67, 0x83, 0x80, 0x78, 0x56, 0x34, 0x12, 0xFF
; ; add dword [rax + 0x12345678], 0xFF
; db 0x83, 0x80, 0x78, 0x56, 0x34, 0x12, 0xFF
; ; add qword [eax + 0x12345678], 0xFF
; db 0x48, 0x67, 0x83, 0x80, 0x78, 0x56, 0x34, 0x12, 0xFF
; ; add qword [rax + 0x12345678], 0xFF
; db 0x48, 0x83, 0x80, 0x78, 0x56, 0x34, 0x12, 0xFF

; test al, bl
; test byte [eax + ecx*2 + 0x10], bl
; test byte [rax + rcx*2 + 0x10], bl
; test ax, r8w
; test eax, r8d
; test rax, r8
; test word [eax + ebx*2 + 0x10], r8w
; test word [rax + rbx*2 - 0x10], r8w
; test dword [eax + ebx*2 - 0x10], r8d
; test dword [rax + rbx*2 + 0x10], r8d
; test qword [eax + ebx*2 + 0x10], r8
; test qword [rax + rbx*2 - 0x10], r8

; xchg r8w, word [eax + ebx*2 + 0x10]
; xchg r8w, word [rax + rbx*2 + 0x10]
; xchg r8d, dword [eax + ebx*2 + 0x10]
; xchg r8d, dword [rax + rbx*2 + 0x10]
; xchg r8, qword [eax + ebx*2 + 0x10]
; xchg r8, qword [rax + rbx*2 + 0x10]

; mov al, r8b
; mov byte [eax + ebx*2 + 0x10], r8b
; mov byte [rax + rbx*2 + 0x10], r8b
; mov ax, r8w
; mov eax, r8d
; mov rax, r8
; mov word [eax + ebx*2 + 0x10], r8w
; mov word [rax + rbx*2 + 0x10], r8w
; mov dword [eax + ebx*2 + 0x10], r8d
; mov dword [rax + rbx*2 + 0x10], r8d
; mov qword [eax + ebx*2 + 0x10], r8
; mov qword [rax + rbx*2 + 0x10], r8
; mov r8b, byte [eax + ebx*2 + 0x10]
; mov r8b, byte [rax + rbx*2 + 0x10]
; mov r8w, word [eax + ebx*2 + 0x10]
; mov r8w, word [rax + rbx*2 + 0x10]
; mov r8d, dword [eax + ebx*2 + 0x10]
; mov r8d, dword [rax + rbx*2 + 0x10]
; mov r8, qword [eax + ebx*2 + 0x10]
; mov r8, qword [rax + rbx*2 + 0x10]

; lea r8d, [eax + ebx*2 + 0x10]
; lea r8d, [rax + rbx*2 + 0x10]
; lea r8, [eax + ebx*2 + 0x10]
; lea r8, [rax + rbx*2 + 0x10]

; ; pop ax
; db 0x66, 0x8F, 0xC0
; ; pop rax
; db 0x48, 0x8F, 0xC0
; ; pop word [eax]
; db 0x66, 0x67, 0x8F, 0x00
; ; pop qword [eax]
; db 0x67, 0x48, 0x8F, 0x00
; ; pop word [rax]
; db 0x66, 0x8F, 0x00
; ; pop qword [rax]
; db 0x48, 0x8F, 0x00
; ; pop word [r8d + 0x10]
; db 0x66, 0x67, 0x41, 0x8F, 0x40, 0x10
; ; pop qword [r8d + 0x10]
; db 0x67, 0x49, 0x8F, 0x40, 0x10
; ; pop word [r8 + 0x10]
; db 0x66, 0x41, 0x8F, 0x40, 0x10
; ; pop qword [r8 + 0x10]
; db 0x49, 0x8F, 0x40, 0x10

; xchg ax, ax
; xchg ebx, eax
; xchg rcx, rax
; xchg r13w, ax
; xchg r14d, eax
; xchg r15, rax
; xchg eax, ebx
; xchg rax, rcx
; xchg ax, r13w
; xchg eax, r14d
; xchg rax, r15

; pause

; cbw
; cwde
; cdqe
; cwd
; cdq
; cqo

; fwait
; pushfq
; popfq
; sahf
; lahf

; ; mov al, [0x123456789ABCDEF0]
; db 0xA0, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12
; ; mov ax, [0x123456789ABCDEF0]
; db 0x66, 0xA1, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12
; ; mov eax, [0x123456789ABCDEF0]
; db 0xA1, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12
; ; mov rax, [0x123456789ABCDEF0]
; db 0x48, 0xA1, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12
; ; mov [0x123456789ABCDEF0], al
; db 0xA2, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12
; ; mov [0x123456789ABCDEF0], ax
; db 0x66, 0xA3, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12
; ; mov [0x123456789ABCDEF0], eax
; db 0xA3, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12
; ; mov [0x123456789ABCDEF0], rax
; db 0x48, 0xA3, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12

; movsb
; movsw
; movsd
; movsq
; cmpsb
; cmpsw
; cmpsd
; cmpsq

; test al, 0x12
; test ax, 0x1234
; test eax, 0x12345678
; test rax, 0x12345678

; stosb
; stosw
; stosd
; stosq
; lodsb
; lodsw
; lodsd
; lodsq
; scasb
; scasw
; scasd
; scasq

; mov al, 0x10
; mov bl, 0x10
; mov ah, 0x10
; mov bh, 0x10
; mov r8b, 0x10
; mov r9b, 0x10
; mov r12b, 0x10
; mov r13b, 0x10

; mov ax, 0x1234
; mov eax, 0x12345678
; mov rax, 0x1234567890ABCDEF
; mov r8w, 0x1234
; mov r8d, 0x12345678
; mov r8, 0x1234567890ABCDEF

; rol al, 0x02
; rol r8b, 0x02
; rol ax, 0x02
; rol r8w, 0x02
; rol eax, 0x02
; rol r8d, 0x02
; rol rax, 0x02
; rol r8, 0x02
; rol byte [eax], 0x02
; rol byte [rax], 0x02
; rol byte [0x12345678], 0x02
; rol word [eax], 0x02
; rol word [rax], 0x02
; rol word [0x12345678], 0x02
; rol dword [eax], 0x02
; rol dword [rax], 0x02
; rol dword [0x12345678], 0x02
; rol qword [eax], 0x02
; rol qword [rax], 0x02
; rol qword [0x12345678], 0x02

; retn 0x1234
; retn

; ; mov al, 0x7F
; db 0xC6, 0xC0, 0x7F
; ; mov cl, 0x7F
; db 0xC6, 0xC1, 0x7F
; ; mov byte [rax+0x10], 0xFF
; db 0xC6, 0x40, 0x10, 0xFF
; ; mov byte [rcx+0x10], 0xFF
; db 0xC6, 0x41, 0x10, 0xFF

; ; mov dx, 0xBEEF
; db 0x66, 0xC7, 0xC2, 0xEF, 0xBE
; ; mov word [rbx + 0x20], 0xABCD
; db 0x66, 0xC7, 0x43, 0x20, 0xCD, 0xAB
; ; mov ecx, 0xCAFEBABE
; db 0xC7, 0xC1, 0xBE, 0xBA, 0xFE, 0xCA
; ; mov dword [rdx], 0xDEADBEEF
; db 0xC7, 0x02, 0xEF, 0xBE, 0xAD, 0xDE
; ; mov dword [rbp - 0x4], 0x90ABCDEF
; db 0xC7, 0x45, 0xFC, 0xEF, 0xCD, 0xAB, 0x90
; ; mov r8d, 0x11223344
; db 0x41, 0xC7, 0xC0, 0x44, 0x33, 0x22, 0x11
; ; mov rax, -1
; db 0x48, 0xC7, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF
; ; mov qword [r9 + 0x10], 0x12345678
; db 0x49, 0xC7, 0x41, 0x10, 0x78, 0x56, 0x34, 0x12

; enter	0x1234, 0x12
; leave

; retf 0x1234
; retf

; int3
; int 0x12
; iretq

; rol al, 1
; rol r8b, 1
; rol ax, 1
; rol r8w, 1
; rol eax, 1
; rol r8d, 1
; rol rax, 1
; rol r8, 1
; rol byte [eax], 1
; rol byte [rax + rcx*2 + 0x10], 1
; rol byte [0x12345678], 1
; rol word [eax], 1
; rol word [rax], 1
; rol word [0x12345678], 1
; rol dword [eax], 1
; rol dword [rax], 1
; rol dword [0x12345678], 1
; rol qword [eax], 1
; rol qword [rax], 1
; rol qword [0x12345678], 1

; rol al, cl
; rol r8b, cl
; rol ax, cl
; rol r8w, cl
; rol eax, cl
; rol r8d, cl
; rol rax, cl
; rol r8, cl
; rol byte [eax], cl
; rol byte [rax], cl
; rol byte [0x12345678], cl
; rol word [eax], cl
; rol word [rax], cl
; rol word [0x12345678], cl
; rol dword [eax], cl
; rol dword [rax], cl
; rol dword [0x12345678], cl
; rol qword [eax], cl
; rol qword [rax], cl
; rol qword [0x12345678], cl

; loopnz kernel_task
; loopz kernel_task
; loop kernel_task
; jrcxz kernel_task

; in al, 0x10
; in ax, 0x10
; in eax, 0x10

; out 0x10, al
; out 0x10, ax
; out 0x10, eax

; in al, dx
; in ax, dx
; in eax, dx

; out dx, al
; out dx, ax
; out dx, eax

; call kernel_task

; jmp kernel_task

; ; test byte [rax], 0xFF
; db 0xF6, 0x00, 0xFF
; ; not byte [rbx]
; db 0xF6, 0x13
; ; new byte [rsi]
; db 0xF6, 0x1E
; ; mul byte [rdx]
; db 0xF6, 0x22
; ; imul byte [rdi]
; db 0xF6, 0x2F
; ; div byte [rcx]
; db 0xF6, 0x31
; ; idiv byte [rax + 0x10]
; db 0xF6, 0x78, 0x10

; ; test eax, 0x12345678
; db 0xF7, 0xC0, 0x78, 0x56, 0x34, 0x12
; ; not dword [rbx]
; db 0xF7, 0x13
; ; neg dword [rdi]
; db 0xF7, 0x1F
; ; mul dword [rcx]
; db 0xF7, 0x21
; ; imul dword [rdx]
; db 0xF7, 0x2A
; ; div dword [rsi]
; db 0xF7, 0x36
; ; idiv dword [rdi]
; db 0xF7, 0x3F

; ; int byte [eax]
; db 0x67, 0xFE, 0x00
; ; int byte [rax]
; db 0xFE, 0x00
; ; int bl
; db 0xFE, 0xC3
; ; dec byte [ebx]
; db 0x67, 0xFE, 0x0B
; ; dec byte [rbx]
; db 0xFE, 0x0B
; ; dec cl
; db 0xFE, 0xC9

; inc eax
; inc rax
; inc dword [eax]
; inc qword [eax]
; inc dword [rax]
; inc qword [rax]
; dec eax
; dec rax
; dec dword [eax]
; dec qword [eax]
; dec dword [rax]
; dec qword [rax]

; call rax
; db 0x67, 0xff, 0x11		; call qword [ecx]
; db 0xff, 0x11		; call qword [rcx]
; ; db 0xff, 0x18		; call far [rax]
; db 0xff, 0xe2		; jmp rdx
; db 0x67, 0xff, 0x27		; jmp qword [edi]
; db 0xff, 0x27		; jmp qword [rdi]
; ; db 0xff, 0x2b		; jmp far [rbx]
; db 0xff, 0xf6		; push rsi
; db 0x67, 0xff, 0x75, 0x10	; push qword [ebp + 0x10]
; db 0xff, 0x75, 0x10	; push qword [rbp + 0x10]

; nop
; nop
; nop
; nop
; nop
; nop
; nop
; nop

	; turn off Interrupt Flag
	cli

	; turn off Direction Flag
	cld

	; preserve original registers
	push	rax
	push	rbx
	push	rcx
	push	rdx
	push	rsi
	push	rdi
	push	rbp
	push	r8
	push	r9
	push	r10
	push	r11
	push	r12
	push	r13
	push	r14
	push	r15

	; preserve "floating point" registers
	mov	rbp,	0xFFFFFFFFFFFFF000
	FXSAVE64	[rbp]

	; execute exception handler
	call	kernel_task_switch

	; restore "floating point" registers
	mov	rbp,	0xFFFFFFFFFFFFF000
	FXRSTOR64	[rbp]

	; restore ogirinal registers
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	r11
	pop	r10
	pop	r9
	pop	r8
	pop	rbp
	pop	rdi
	pop	rsi
	pop	rdx
	pop	rcx
	pop	rbx
	pop	rax

	; return from routine
	iretq
